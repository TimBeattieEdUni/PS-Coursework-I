Planning:

Planning the execution of the project was an integral part of the group activities. The tasks, which were to be carried out, were prioritised and then divided up among the group members. The tasks were assigned to the members based on competence for the task, and personal preferences. The priorities were not to be enforced strictly, but rather to have a general understanding of the work flow. All the tasks were not delegated to the group members initially, but rather a small set of tasks, which belonged together, were taken up and carried out by the members, after which they could move on to a new task.

At the first meeting it was decided to establish a coding standard, set up revision control, create a build system, and write up a task list to be followed. For details on the coding standard, see ???Appendix C???, the coding standard was enforce by the usage of astyle; for details on the revision control, see .\ref{Revision Control}; for details on the build system, see .\ref{Build Tools}. The task list was structured along the lines of "starting you project" section of the coursework specifications. The task list has also included the importance of the items, i.e. essential or polish. It was also agreed that any additional items can be added to the task list, and marked according to their importance. 

Establishment of a test framework was also essential, thus it was planned that as the coding of different sections of the program were carried out, a subsequent unit test was to be written along with the code. This was in order to ensure that only working program modules are to be added to the main program. For details see .\ref{Unit Test}.
Code documentation was also to be a prioroty, hence the usage of Doxygen was unanimously agreed on by the group. For details on the code documentation see ???Documentation??? section of this report.

The essential programming tasks were to write a computational kernel and the I/O. The computational kernel was to include the code implementation of the equations from the coursework specifications, and classes to represent the state of the landscape as well as single cells. The I/O had to be able to manage the initial conditions: text file with dimensions and land/water mask, initial distribution of hares and pumas (both random and predetermined), and the ability to store populations in file. ???Appendices A & B??? include information on generating personalised land/water files.  For details see the .\ref{Design} section of this report, which describes other relevant program design/layout aspects of the project.

As the group was planning to finish the essential tasks, the polish phase of the project was to start. The main aspects of the polish section was to carry out performance tests, investigate the use of different types of landscapes/populations, analysis of this data, and finally code optimisation. For details see .\ref{Performance tests and analysis} section of the report.
