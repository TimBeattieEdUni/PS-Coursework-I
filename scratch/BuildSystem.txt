The build system:

The project's build system was implemented using GNU Make as several of the group were already familiar with it.  The project's source code was separated into three directories: "classes", "app", and "test", which contained source code for the project's C++ classes, main application program, and unit test program, respectively.  Separate directories were also created for the project's Doxygen documentation and for the group report in LaTeX format.  A set of recursive Makefiles was set up to perform the following tasks:

	Build the C++ classes into a static library.
	Build the application, linking in the class library.
	Unpack and build the unit test framework (see section "Unit Testing").
	Build the unit test program, linking in the class library.
	Run the unit test program.
	Compile the group report LaTeX source into a PDF document.
	Generate Doxygen documentation for all source code.

For an explanation of the reasons for using a static library, see section "Unit Testing".  

The main goals of the build system were to save programmer time and reduce errors, and to this end every task which could reasonably be automated was included in the build.  Where possible, dependencies between tasks were implemented.  For example, the "test" target was made to depend on the "classes" directory and the UnitTest++ library, ensuring that these were built if necessary before building and running the unit test program.  As another example, the "doc" target was made to depend on all three directories which contained C++ source code, ensuring that the Doxygen generated documentation would be rebuilt if any source had been modified.

Common settings for C++ compilation and linking were placed in a top-level Make include file which was included by the Makefiles in each of the three directories which contained source code.  These settings included directory and file names and the selection of compiler, linker, and library archiver with their command-line options.  This enabled these settings to be maintained in one place for all source code.  

The default target in the top-level Makefile was "release", which performed all tasks in the list above.  Following a common pattern for Makefiles, a second "debug" target was added which differed from "release" only in its compiler settings: release builds were optimised with the "-O3" compiler flag, and debug builds were compiled with debug symbols using "-g" and had the "_DEBUG" macro defined with "-D_DEBUG".  The debug build was used only briefly when diagnosing a subtle bug in class Landscape, but on that one occasion it was extremely useful.  (See section "Debugging".)

For profiling the application, a third top-level target was added: "profile".  This target ran "make clean" on the directories "app" and "classes" and rebuilt both with profiling enabled using the "-pg" compiler flag.  To build the application again without profiling support, it was first necessary to run "make clean" manually either at the top level or in both the "app" and "classes" directories.  As with all manual tasks, it would have been beneficial to automate this, but the group was not able to implement causing "make" to clean and rebuild the application and classes if and only if the previous build had been a profiling build in the time available.

GNU Make had the benefits of being free, widely used, mature and therefore robust, and available on most platforms.  However, while GNU Make is generally considered high-quality software, effective use of its built-in variables occasionally resulted in rules which were hard to read and therefore hard to debug.  The project's Makefiles were only edited occasionally, when the project's structure changed changed, and this allowed plenty of time between edits for a developer to forget the details of the problem a specific Make rule was intended to solve.  The group unanimously agreed, however, that any difficulty with applying Make to the task of building the project's deliverables was more than outweighed by the benefits of being able to build everything reliably and repeatably with one simple command: "make".
